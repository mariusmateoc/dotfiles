[alias]

    a     = commit --amend
    b     = branch
    c     = commit -am
    ca    = !git add -A && git commit                           # Commit all changes.
    co    = checkout
    cp    = cherry-pick
    d     = diff -- . ':!*package-lock.json' ':!*yarn.lock'
    dc    = diff --cached -- . ':!*package-lock.json' ':!*yarn.lock'
    df    = diff --color --color-words --abbrev ':!*package-lock.json' ':!*yarn.lock'
    down  = !"git pull; git submodule foreach git pull origin master"
    f     = fetch
    git   = !exec git                                           # Allow `$ git git git...`
    l     = log --pretty=oneline -n 20 --graph --abbrev-commit  # Show custom graph.
    lc    = shortlog --email --numbered --summary               # List contributors.
    r     = rebase
    s     = status
    up    = push
    w     = instaweb --httpd=webrick                            # Start web-based visualizer.

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Credit an author on the latest commit.

    credit = "!f() { \
        if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
            git commit --amend --author \"$1 <$2>\" -C HEAD; \
        fi \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Credit a co-author on the latest commit.
    #
    # https://help.github.com/en/articles/creating-a-commit-with-multiple-authors
    # https://help.github.com/en/articles/creating-a-commit-on-behalf-of-an-organization

    credit-co-author = "!f() { \
        if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
            GIT_EDITOR=\"git interpret-trailers --in-place --trailer='Co-authored-by: $1 <$2>'\" git commit --amend; \
        fi \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # `git di $number` shows the diff between the state `$number`
    # revisions ago and the current state

    di = "!d() { \
        git diff --patch-with-stat HEAD~$1; \
    }; \
        git diff-index --quiet HEAD -- || clear; d"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Remove branches that have already been merged with master
    # a.k.a. ‘delete merged’

    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Find branches containing commit

    fb = "!f() { \
        git branch -a --contains $1; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Find commits by source code.

    fc = "!f() { \
        git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; \
    }; f"


    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Find commits by commit message.

    fm = "!f() { \
        git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Find tags containing commit

    ft = "!f() { \
        git describe --always --contains $1; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Switch to a branch, creating it if necessary

    go = "!f() { \
        git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Log commits with graph, date and author.

    lg = "!f() { \
        git log --color --graph --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --abbrev-commit; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # List remote branches.

    lrb = "!f() { \
        remote="${1:-origin}"; \
        git ls-remote --heads "$remote"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Merge GitHub pull request on top of the current branch or,
    # if a branch name is specified, on top of the specified branch.

    mpr = "!f() { \
        declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
        declare branch=\"${2:-$currentBranch}\"; \
        if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
            git fetch origin refs/pull/$1/head:pr/$1 && \
            git checkout -B $branch && \
            git rebase $branch pr/$1 && \
            git checkout -B $branch && \
            git merge pr/$1 && \
            git branch -D pr/$1 && \
            git commit --amend -m \"$(git log -1 --pretty=%B)\n\nClose #$1\"; \
        fi \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Interactive rebase with the given number of latest commits

    reb = "!r() { \
        git rebase -i HEAD~$1; \
    }; r"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Remove the tag with the specified tag name if
    # exists and tag the latest commit with that name.

    retag = "!f() { \
        git tag -d "$1" &> /dev/null; \
        git tag $1; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Remove last commits (by default it removes the last commit).

    rlc = "!f() { \
        declare n=\"${1:-1}\"; \
        git reset --hard \"HEAD~$n\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Undo last commits (by default it undoes the last commit).

    ulc = "!f() { \
        declare n=\"${1:-1}\"; \
        git reset --soft \"HEAD~$n\"; \
    }; f"

[apply]

    # Detect whitespace errors when applying a patch

    whitespace = fix

[core]

    abbrev = 12
    attributesfile = ~/.gitattributes
    autocrlf = input
    editor = vim
    excludesfile = ~/.gitignore

    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line

    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on macOS
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>

    trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html

    precomposeunicode = false

[color]

    ui = auto

[color "branch"]

    current = green bold
    local = green
    remote = yellow

[color "diff"]

    frag = magenta
    meta = yellow

    new = green
    old = red

    newMoved = cyan
    oldMoved = blue

[color "status"]

    added = green
    changed = yellow
    untracked = red

[diff]

    # Detect copies as well as renames

    renames = copies

    # Show blocks of moved text of at least 20
    # alphanumeric characters differently than adds/deletes.
    #
    # https://git-scm.com/docs/git-diff#git-diff-zebra

    colorMoved = zebra

    tool = default-difftool

[diff "bin"]

    # Use `hexdump` to diff binary files.

    textconv = hexdump -v -C

[difftool "default-difftool"]

    cmd = code --wait --diff $LOCAL $REMOTE

[filter "lfs"]

    required = true
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process

[merge]

    # Include summaries of merged commits in newly created merge commit messages

    log = true

[pretty]

    custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
    #                     │        │            │            │             └─ author name
    #                     │        │            │            └─ message
    #                     │        │            └─ date (relative)
    #                     │        └─ decorations (branch, heads or tags)
    #                     └─ hash (abbreviated)


[push]

    # Make `git push` automatically push relevant
    # annotated tags when pushing branches out.

    followTags = true

[user]

    # Do not guess the user's identity.
    # https://github.com/git/git/blob/90f7b16b3adc78d4bbabbd426fb69aa78c714f71/Documentation/config.txt#L2847-L2855

    useConfigOnly = true

    # [!] DO NOT store sensitive information such as the Git user
    # credentials (`name` / `email`), or things such as the `signingkey`
    # in this file, add them in `~/.gitconfig.local`!
    #
    # See also: https://github.com/mariusmateoc/dotfiles#gitconfiglocal

[include]

    # Load local configs.
    # https://git-scm.com/docs/git-config#_includes
    #
    # [!] The following needs to remain at the end of this file in
    #     order to allow any of the above configs to be overwritten
    #     by the local ones

    path = ~/.gitconfig.local
